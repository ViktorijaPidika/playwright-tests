import { test, expect } from '@playwright/test'
import { UAPRegistryPage } from '../../../../src/pages/uapRegistryPage'
import { fillNewObservationForm } from '../../../../src/helpers/uapRegistryHelper';

test.describe('Vulnerability test with basic XSS input in Description field', () => {

    let uapRegistryPage: UAPRegistryPage;
    const testData = {
        location: 'Riga, Latvia',
        date: '2025-04-06',
        image: 'https://i.ytimg.com/vi/Pws0Om4VquU/hq720.jpg?sqp=-oaymwEhCK4FEIIDSFryq4qpAxMIARUAAAAAGAElAADIQj0AgKJD&rs=AOn4CLAhE0tn0U24HIjpIHKZ9H6A0ijurA',
        description: `<script>alert('XSS')</script>`
    };

    test.beforeEach(async ({ page }) => {
        //authentication is not present on the page. Once issue resolved:
        //add additional log in steps here

        uapRegistryPage = new UAPRegistryPage(page);
        await uapRegistryPage.openUapRegistryPage();
        await expect(uapRegistryPage.newObservationDropDown).toBeVisible();
    });

    test('Verify input is safely encoded and no scripts are run with basic XSS input in "Description" field', async () => {
        await test.step('Add new observation', async () => {
            await uapRegistryPage.newObservationDropDown.click();
            await expect(uapRegistryPage.newObservationForm).toBeVisible();

            await fillNewObservationForm(uapRegistryPage, testData);
            await uapRegistryPage.addButton.click();
        });

        await test.step('Verify XSS input is not displayed', async () => {
            await expect(uapRegistryPage.observationArticleText.last())
                .not.toHaveText(`${testData.description}`);
        });
    });

    test.afterEach(async ({ }) => {
        await uapRegistryPage
            .findObservationByTitle(testData.location, testData.date).last()
            .locator('[value="delete"]')
            .click();
    });
})